{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"solivagant \ud83d\udd06","text":""},{"location":"#compose-multiplatform-navigation-library-pragmatic-type-safety-navigation-for-compose-multiplatform-based-on-freeletics-khonshu-navigation-viewmodel-savedstatehandle-lifecycle-multi-backstacks-transitions-back-press-handling-and-more","title":"\ud83d\udd06 Compose Multiplatform Navigation library - \ud83c\udf38 Pragmatic, type safety navigation for Compose Multiplatform. Based on Freeletics Khonshu Navigation. \u2665\ufe0f ViewModel, SavedStateHandle, Lifecycle, Multi-Backstacks, Transitions, Back-press handling, and more\u2026","text":"<ul> <li>Integrates with <code>Jetbrains Compose Multiplatform</code> seamlessly and easily.</li> </ul> <ul> <li> <p>Integrates with kmp-viewmodel library seamlessly and smoothly</p> <ul> <li>Stack entry scoped <code>ViewModel</code>, exists as long as the   stack entry is on the navigation stack, including the configuration changes on <code>Android</code>.</li> </ul> <ul> <li>Supports <code>SavedStateHandle</code>, used to save and restore data over configuration changes   or process death on <code>Android</code>.</li> </ul> </li> </ul> <ul> <li>The navigation stack state is saved and restored automatically over configuration changes and process   death on <code>Android</code>.   On other platforms, you can use a support class provided by this library to store the navigation stack state   as long as you want.</li> </ul> <ul> <li>Type safety navigation, easy to pass data between destinations.   No more <code>String</code> route and dynamic query parameters.   The <code>Solivagant</code> library uses <code>NavRoute</code>s and <code>NavRoot</code>s to define routes that can be navigated to.   Arguments can be defined as part of the route (a.ka. properties of the route class) and are type safe.   Each <code>NavRoute</code> and <code>NavRoot</code> has a corresponding <code>NavDestination</code> that describes the UI (a.k.a <code>@Composable</code>) of the   route.</li> </ul> <ul> <li>Supports Multi-Backstacks, this is most commonly used in apps that use bottom navigation to   separate the back stack of each tab.   See Freeletics Khonshu Navigation - Multiple back stacks   for more details.</li> </ul> <ul> <li>Supports <code>LifecycleOwner</code>, <code>Lifecycle</code> events and states, similar to <code>AndroidX Lifecycle</code> library.</li> </ul> <p> </p> <p>[!NOTE] This library is still in alpha, so the API may change in the future.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Most of the code in <code>solivagant-khonshu-navigation-core</code> and <code>solivagant-navigation</code> libraries is   taken from Freeletics Khonshu Navigation,   and ported to <code>Kotlin Multiplatform</code> and <code>Compose Multiplatform</code>.</li> </ul> <ul> <li>The <code>solivagant-lifecycle</code> library is inspired   by Essenty Lifecycle,   and AndroidX Lifecycle.</li> </ul>"},{"location":"#author-petrus-nguyen-thai-hoc","title":"Author: Petrus Nguy\u1ec5n Th\u00e1i H\u1ecdc","text":"<p>Liked some of my work? Buy me a coffee (or more likely a beer)</p> <p></p>"},{"location":"#docs","title":"Docs","text":""},{"location":"#0x-release-docs-httpshoc081098githubiosolivagantdocs0x","title":"0.x release docs: https://hoc081098.github.io/solivagant/docs/0.x","text":""},{"location":"#snapshot-docs-httpshoc081098githubiosolivagantdocslatest","title":"Snapshot docs: https://hoc081098.github.io/solivagant/docs/latest","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>allprojects {\n  repositories {\n    [...]\n    mavenCentral()\n  }\n}\n</code></pre> <pre><code>implementation(\"io.github.hoc081098:solivagant-navigation:0.1.1\")\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>The library is ported from <code>Freeletics Khonshu Navigation</code> library, so the concepts is similar. You can read the Freeletics Khonshu Navigation to understand the concepts.</p>"},{"location":"#1-create-navroots-navroutes","title":"1. Create <code>NavRoot</code>s, <code>NavRoute</code>s","text":"<pre><code>@Immutable\n@Parcelize\ndata object StartScreenRoute : NavRoot\n\n@Immutable\n@Parcelize\ndata object SearchProductScreenRoute : NavRoute\n</code></pre> <p>[!NOTE] <code>@Parcelize</code> is provided by <code>kmp-viewmodel-savedstate</code> library. See kmp-viewmodel-savedstate for more details.</p>"},{"location":"#2-create-navdestinations-along-with-composables-and-viewmodels","title":"2. Create <code>NavDestination</code>s along with <code>Composable</code>s and <code>ViewModel</code>s","text":"<ul> <li><code>StartScreen</code>: <code>StartScreenDestination</code>, <code>@Composable fun StartScreen()</code> and <code>StartViewModel</code></li> </ul> <pre><code>@JvmField\nval StartScreenDestination: NavDestination =\n  ScreenDestination&lt;StartScreenRoute&gt; { StartScreen() }\n\n@Composable\ninternal fun StartScreen(\n  modifier: Modifier = Modifier,\n  viewModel: StartViewModel = koinKmpViewModel(),\n) {\n  // UI Composable\n}\n\ninternal class StartViewModel(\n  // used to trigger navigation actions from outside the view layer (e.g. from a ViewModel).\n  // Usually, it is singleton object, or the host Activity retained scope.\n  private val navigator: NavEventNavigator,\n) : ViewModel() {\n  internal fun navigateToProductsScreen() = navigator.navigateTo(ProductsScreenRoute)\n  internal fun navigateToSearchProductScreen() = navigator.navigateTo(SearchProductScreenRoute)\n}\n</code></pre> <ul> <li><code>SearchProductScreen</code>: <code>SearchProductScreenDestination</code>, <code>@Composable fun SearchProductsScreen()</code>   and <code>SearchProductsViewModel</code></li> </ul> <pre><code>@JvmField\nval SearchProductScreenDestination: NavDestination =\n  ScreenDestination&lt;SearchProductScreenRoute&gt; { SearchProductsScreen() }\n\n@Composable\ninternal fun SearchProductsScreen(\n  modifier: Modifier = Modifier,\n  viewModel: SearchProductsViewModel = koinKmpViewModel&lt;SearchProductsViewModel&gt;(),\n) {\n  // UI Composable\n}\n\ninternal class SearchProductsViewModel(\n  private val searchProducts: SearchProducts,\n  private val savedStateHandle: SavedStateHandle,\n  // used to trigger navigation actions from outside the view layer (e.g. from a ViewModel).\n  // Usually, it is singleton object, or the host Activity retained scope.\n  private val navigator: NavEventNavigator,\n) : ViewModel() {\n  fun navigateToProductDetail(id: Int) {\n    navigator.navigateTo(ProductDetailScreenRoute(id))\n  }\n}\n</code></pre>"},{"location":"#3-setup","title":"3. Setup","text":"<ul> <li>Gather all <code>NavDestination</code>s in a set and use <code>NavEventNavigator</code> to trigger navigation actions.</li> </ul> <pre><code>@Stable\nprivate val AllDestinations: ImmutableSet&lt;NavDestination&gt; = persistentSetOf(\n  StartScreenDestination,\n  SearchProductScreenDestination,\n  // and more ...\n)\n\n@Composable\nfun MyAwesomeApp(\n  // used to trigger navigation actions from outside the view layer (e.g. from a ViewModel).\n  // Usually, it is singleton object, or the host Activity retained scope.\n  navigator: NavEventNavigator,\n  modifier: Modifier = Modifier,\n) {\n  // BaseRoute is the parent interface of NavRoute and NavRoot.\n  // It implements Parcelable, so it can be used with rememberSavable.\n  var currentRoute: BaseRoute? by rememberSavable { mutableStateOf(null) }\n\n  NavHost(\n    modifier = modifier,\n    // route to the screen that should be shown initially\n    startRoute = StartScreenRoute,\n    // should contain all destinations that can be navigated to\n    destinations = AllDestinations,\n    navEventNavigator = navigator,\n    destinationChangedCallback = { currentRoute = it },\n  )\n}\n</code></pre> <ul> <li>To display <code>MyAwesomeApp</code> on <code>Android</code>, use <code>setContent</code> in <code>Activity</code> or <code>Fragment</code>.</li> </ul> <pre><code>class MainActivity : ComponentActivity() {\n  override fun onCreate(savedInstanceState: Bundle) {\n    super.onCreate()\n\n    // navigator can be retrieved from the DI container, such as Koin, Dagger Hilt, etc.\n\n    setContent {\n      MyAwesomeApp(\n        navigator = navigator\n      )\n    }\n  }\n}\n</code></pre> <ul> <li>To display <code>MyAwesomeApp</code> on <code>Desktop</code>, \u2026 TBD \u2026 please check out samples/sample/desktop/src/commonMain/kotlin/com/hoc081098/solivagant/sample/main.kt</li> </ul> <ul> <li>To display <code>MyAwesomeApp</code> on <code>iOS/tvOS/watchOS</code>, \u2026 TBD \u2026 please check out samples/sample/iosApp/iosApp/ContentView.swift</li> </ul>"},{"location":"#4use-naveventnavigator-in-viewmodel-s-or-in-composable-s-to-trigger-navigation-actions","title":"4.Use <code>NavEventNavigator</code> in <code>ViewModel</code> s or in <code>@Composable</code> s to trigger navigation actions","text":"<pre><code>// navigate to the destination that the given route leads to\nnavigator.navigateTo(DetailScreenRoute(\"some-id\"))\n// navigate up in the hierarchy\nnavigator.navigateUp()\n// navigate to the previous destination in the backstack\nnavigator.navigateBack()\n// navigate back to the destination belonging to the referenced route and remove all destinations\n// in between from the back stack, depending on inclusive the destination\nnavigator.navigateBackTo&lt;MainScreenRoute&gt;(inclusive = false)\n</code></pre>"},{"location":"#samples","title":"Samples","text":"<ul> <li>Complete sample: a complete sample   that demonstrates how to use <code>solivagant-navigation</code> in <code>Compose Multiplatform (Android, Desktop, iOS)</code><ul> <li><code>solivagant-navigation</code> for navigation in Compose Multiplatform.</li> <li><code>kmp-viewmodel</code> to share <code>ViewModel</code> and <code>SavedStateHandle</code>.</li> <li><code>Koin DI</code>.</li> </ul> </li> </ul> <ul> <li>Simple sample: a simple sample   that demonstrates how to use <code>solivagant-navigation</code> in <code>Compose Multiplatform (Android, Desktop, iOS)</code> to   switch between tabs (bottom navigation), but can keep the back stack state of each tab.   Basically, it\u2019s a multi-backstack demo sample.</li> </ul> <ul> <li>Compose Multiplatform KmpViewModel KMM Unsplash Sample: A KMP template of the Unsplash App using Compose multiplatform for Android, Desktop, iOS. Share everything including data, domain, presentation, and UI.</li> </ul> <ul> <li>Compose Multiplatform Todo solivagant Sample: A KMP template of the Todo App using Compose multiplatform for Android, Desktop, iOS and Web. Share everything including data, domain, presentation, and UI.</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[ ] Add more tests</li> <li>[ ] Add more samples</li> <li>[ ] Add docs</li> <li>[ ] Review supported targets</li> <li>[ ] Polish and improve the implementation and the public API</li> <li>[x] Support transition when navigating (since 0.1.0).</li> <li>[ ] Support more targets such as wasm, watchOS, tvOS, etc\u2026</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#unreleased-tbd","title":"Unreleased - TBD","text":""},{"location":"changelog/#011-feb-25-2024","title":"0.1.1 - Feb 25, 2024","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Add workaround for issue   JetBrains/compose-multiplatform #3147 - Kotlin/Native can\u2019t use T::class in inline function of @Composable for iOS.</li> </ul>"},{"location":"changelog/#example-docs-and-tests","title":"Example, docs and tests","text":"<ul> <li>Add Compose Multiplatform Todo solivagant Sample:   A KMP template of the Todo App using Compose multiplatform for Android, Desktop, iOS and Web.   Share everything including data, domain, presentation, and UI.</li> </ul>"},{"location":"changelog/#010-feb-19-2024","title":"0.1.0 - Feb 19, 2024","text":""},{"location":"changelog/#update-dependencies","title":"Update dependencies","text":"<ul> <li>KotlinX Coroutines <code>1.8.0</code>.</li> <li>KMP ViewModel <code>0.7.0</code>.</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>New: Add optional <code>transitionAnimations</code> parameter to <code>NavHost</code> @Composable functions.   Animations can be overridden with <code>NavHostDefaults.transitionAnimations</code>   or disabled with <code>NavHostTransitionAnimations.noAnimations</code>.   Default animations are the same as default animations in AndroidX\u2019s <code>NavHost</code>.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li> <p>Breaking: Add a <code>Modifier</code> parameter to <code>content</code> of <code>NavDestination</code>:   <pre><code>@InternalNavigationApi\npublic sealed interface ContentDestination&lt;T : BaseRoute&gt; : NavDestination {\n  // other members...\n  public val content: @Composable (route: T, modifier: Modifier) -&gt; Unit\n}\n</code></pre></p> <p>This change effects <code>ScreenDestination</code> and <code>OverlayDestination</code> as well. The <code>modifier</code> parameter should be passed to the <code>content</code> of <code>NavDestination</code> (a.k.a the root <code>@Composable</code> of the destination), for example: <pre><code>@Immutable\n@Parcelize\ndata class DetailScreenRoute(val id: String) : NavRoute\n\n@JvmField\nval DetailScreenDestination = ScreenDestination&lt;DetailScreenRoute&gt; { route, modifier -&gt;\n  DetailScreen(modifier = modifier, route = route)\n}\n\n@Composable\ninternal fun DetailScreen(modifier: Modifier, route: DetailScreenRoute) {\n  Scaffold(\n    modifier = modifier, // &lt;--- Pass the modifier to the root @Composable\n    topBar = { /* ... */ },\n  ) {\n    //* ... */\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"changelog/#001-feb-7-2024","title":"0.0.1 - Feb 7, 2024","text":"<ul> <li>Initial release of <code>solivagant</code> \ud83d\udd06.   Compose Multiplatform Navigation - \ud83c\udf38 Pragmatic, type safety navigation for Compose Multiplatform.   Based on Freeletics Khonshu Navigation.   \u2665\ufe0f ViewModel, SavedStateHandle, Lifecycle, Multi-Backstacks, and more\u2026</li> </ul> <ul> <li>Dependencies<ul> <li>Kotlin <code>1.9.22</code>.</li> <li>JetBrains Compose Multiplatform <code>1.5.12</code>.</li> <li>KMP ViewModel <code>0.6.2</code>.</li> <li>KotlinX Coroutines <code>1.7.3</code>.</li> <li>KotlinX Collections Immutable <code>0.3.7</code>.</li> </ul> </li> </ul>"},{"location":"multiplatform/","title":"Multiplatform","text":""},{"location":"multiplatform/#supported-targets","title":"Supported targets","text":"<ul> <li><code>android</code>.</li> <li><code>jvm</code> (<code>Desktop</code>) (must add <code>kotlinx-coroutines-swing</code>/<code>kotlinx-coroutines-javafx</code> to your dependencies to   make sure <code>Dispatchers.Main</code> available).</li> </ul> <p>[!NOTE] If you are targeting <code>Desktop</code> and not using <code>JetBrains Compose Multiplatform</code>, you should provide the dependency <code>org.jetbrains.kotlinx:kotlinx-coroutines-swing</code> or <code>org.jetbrains.kotlinx:kotlinx-coroutines-javafx</code>, the <code>ViewModel.viewModelScope</code> depends on <code>Dispatchers.Main</code> provided by this library on Desktop.</p> <p>If you are using <code>JetBrains Compose Multiplatform</code> and targeting <code>Desktop</code>, you should provide <code>org.jetbrains.kotlinx:kotlinx-coroutines-swing</code>.</p> <ul> <li><code>js</code> (<code>IR</code>).</li> </ul> <ul> <li><code>Darwin</code> targets:<ul> <li><code>iosArm64</code>, <code>iosX64</code>, <code>iosSimulatorArm64</code>.</li> <li><code>macosX64</code>, <code>macosArm64</code>.</li> </ul> </li> </ul>"}]}
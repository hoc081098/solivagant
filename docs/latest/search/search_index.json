{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"solivagant \ud83d\udd06","text":""},{"location":"#compose-multiplatform-navigation-library-pragmatic-type-safety-navigation-for-compose-multiplatform-based-on-freeletics-khonshu-navigation-viewmodel-savedstatehandle-lifecycle-multi-backstacks-transitions-back-press-handling-and-more","title":"\ud83d\udd06 Compose Multiplatform Navigation library - \ud83c\udf38 Pragmatic, type safety navigation for Compose Multiplatform. Based on Freeletics Khonshu Navigation. \u2665\ufe0f ViewModel, SavedStateHandle, Lifecycle, Multi-Backstacks, Transitions, Back-press handling, and more\u2026","text":"<p>![badge][badge-android] ![badge][badge-jvm] ![badge][badge-js] ![badge][badge-js-ir] ![badge][badge-wasm] ![badge][badge-nodejs] ![badge][badge-linux] ![badge][badge-windows] ![badge][badge-ios] ![badge][badge-mac] ![badge][badge-watchos] ![badge][badge-tvos] ![badge][badge-apple-silicon]</p> <ul> <li>Integrates with <code>Jetbrains Compose Multiplatform</code> seamlessly and easily.</li> </ul> <ul> <li> <p>Integrates with kmp-viewmodel library seamlessly and smoothly</p> <ul> <li>Stack entry scoped <code>ViewModel</code>, exists as long as the   stack entry is on the navigation stack, including the configuration changes on <code>Android</code>.</li> </ul> <ul> <li>Supports <code>SavedStateHandle</code>, used to save and restore data over configuration changes   or process death on <code>Android</code>.</li> </ul> </li> </ul> <ul> <li>The navigation stack state is saved and restored automatically over configuration changes and process   death on <code>Android</code>.   On other platforms, you can use a support class provided by this library to store the navigation stack state   as long as you want.</li> </ul> <ul> <li>Type safety navigation, easy to pass data between destinations.   No more <code>String</code> route and dynamic query parameters.   The <code>Solivagant</code> library uses <code>NavRoute</code>s and <code>NavRoot</code>s to define routes that can be navigated to.   Arguments can be defined as part of the route (a.ka. properties of the route class) and are type safe.   Each <code>NavRoute</code> and <code>NavRoot</code> has a corresponding <code>NavDestination</code> that describes the UI (a.k.a <code>@Composable</code>) of the   route.</li> </ul> <ul> <li>Supports Multi-Backstacks, this is most commonly used in apps that use bottom navigation to   separate the back stack of each tab.   See Freeletics Khonshu Navigation - Multiple back stacks   for more details.</li> </ul> <ul> <li>Supports <code>LifecycleOwner</code>, <code>Lifecycle</code> events and states, similar to <code>AndroidX Lifecycle</code> library.</li> </ul> <p> </p> <p>[!NOTE] This library is still in alpha, so the API may change in the future.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Most of the code in <code>solivagant-khonshu-navigation-core</code> and <code>solivagant-navigation</code> libraries is   taken from Freeletics Khonshu Navigation,   and ported to <code>Kotlin Multiplatform</code> and <code>Compose Multiplatform</code>.</li> </ul> <ul> <li>The <code>solivagant-lifecycle</code> library is inspired   by Essenty Lifecycle,   and AndroidX Lifecycle.</li> </ul>"},{"location":"#author-petrus-nguyen-thai-hoc","title":"Author: Petrus Nguy\u1ec5n Th\u00e1i H\u1ecdc","text":"<p>Liked some of my work? Buy me a coffee (or more likely a beer)</p> <p></p>"},{"location":"#docs-installation","title":"Docs &amp; Installation","text":""},{"location":"#0x-release-docs-httpshoc081098githubiosolivagantdocs0x","title":"0.x release docs: https://hoc081098.github.io/solivagant/docs/0.x","text":""},{"location":"#snapshot-docs-httpshoc081098githubiosolivagantdocslatest","title":"Snapshot docs: https://hoc081098.github.io/solivagant/docs/latest","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>allprojects {\n  repositories {\n    [...]\n    mavenCentral()\n  }\n}\n</code></pre> <pre><code>implementation(\"io.github.hoc081098:solivagant-navigation:0.4.0\")\n</code></pre>"},{"location":"#snapshot","title":"Snapshot","text":"Snapshots of the development version are available in Sonatype's snapshots repository. <pre><code>allprojects {\n  repositories {\n    ...\n    maven(url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n  }\n}\n\ndependencies {\n  implementation(\"io.github.hoc081098:solivagant-navigation:0.4.1-SNAPSHOT\")\n}\n</code></pre>  ## Getting started  The library is ported from `Freeletics Khonshu Navigation` library, so the concepts is similar. You can read the [Freeletics Khonshu Navigation](https://freeletics.github.io/khonshu/navigation/get-started/) to understand the concepts.  \ud83d\udc49 Full samples are available [here](#Samples).  ### 1. Create `NavRoot`s, `NavRoute`s  <pre><code>@Immutable\n@Parcelize\ndata object StartScreenRoute : NavRoot\n\n@Immutable\n@Parcelize\ndata object SearchProductScreenRoute : NavRoute\n</code></pre>  &gt; [!NOTE] &gt; `@Parcelize` is provided by `kmp-viewmodel-savedstate` library. &gt; See [kmp-viewmodel-savedstate](https://github.com/hoc081098/kmp-viewmodel?tab=readme-ov-file#2-kmp-viewmodel-savedstate-library) for more details.  ### 2. Create `NavDestination`s along with `Composable`s and `ViewModel`s  ###### StartScreen.kt  <pre><code>@JvmField\nval StartScreenDestination: NavDestination =\n  ScreenDestination&lt;StartScreenRoute&gt; { StartScreen() }\n\n@Composable\ninternal fun StartScreen(\n  modifier: Modifier = Modifier,\n  // kmpViewModel or kojectKmpViewModel can be used instead.\n  viewModel: StartViewModel = koinKmpViewModel(),\n) {\n  // UI Composable\n}\n\ninternal class StartViewModel(\n  // used to trigger navigation actions from outside the view layer (e.g. from a ViewModel).\n  // Usually, it is singleton object, or the host Activity retained scope.\n  private val navigator: NavEventNavigator,\n) : ViewModel() {\n  internal fun navigateToProductsScreen() = navigator.navigateTo(ProductsScreenRoute)\n  internal fun navigateToSearchProductScreen() = navigator.navigateTo(SearchProductScreenRoute)\n}\n</code></pre>  ###### SearchProductScreen.kt  <pre><code>@JvmField\nval SearchProductScreenDestination: NavDestination =\n  ScreenDestination&lt;SearchProductScreenRoute&gt; { SearchProductsScreen() }\n\n@Composable\ninternal fun SearchProductsScreen(\n  modifier: Modifier = Modifier,\n  // kmpViewModel or kojectKmpViewModel can be used instead.\n  viewModel: SearchProductsViewModel = koinKmpViewModel&lt;SearchProductsViewModel&gt;(),\n) {\n  // UI Composable\n}\n\ninternal class SearchProductsViewModel(\n  private val searchProducts: SearchProducts,\n  private val savedStateHandle: SavedStateHandle,\n  // used to trigger navigation actions from outside the view layer (e.g. from a ViewModel).\n  // Usually, it is singleton object, or the host Activity retained scope.\n  private val navigator: NavEventNavigator,\n) : ViewModel() {\n  fun navigateToProductDetail(id: Int) {\n    navigator.navigateTo(ProductDetailScreenRoute(id))\n  }\n}\n</code></pre>  ### 3. Setup  #### 3.1. NavHost  Gather all `NavDestination`s in a set and use `NavEventNavigator` to trigger navigation actions.  ###### MyAwesomeApp.kt  <pre><code>@Stable\nprivate val AllDestinations: ImmutableSet&lt;NavDestination&gt; = persistentSetOf(\n  StartScreenDestination,\n  SearchProductScreenDestination,\n  // and more ...\n)\n\n@Composable\nfun MyAwesomeApp(\n  // used to trigger navigation actions from outside the view layer (e.g. from a ViewModel).\n  // Usually, it is singleton object, or the host Activity retained scope.\n  navigator: NavEventNavigator = koinInject(),\n  modifier: Modifier = Modifier,\n) {\n  // BaseRoute is the parent interface of NavRoute and NavRoot.\n  // It implements Parcelable so that it can be used with rememberSavable.\n  var currentRoute: BaseRoute? by rememberSavable { mutableStateOf(null) }\n\n  NavHost(\n    modifier = modifier,\n    // route to the screen that should be shown initially\n    startRoute = StartScreenRoute,\n    // should contain all destinations that can be navigated to\n    destinations = AllDestinations,\n    // when passing a NavEventNavigator to NavHost, NavHost will take care of setting up the navigator by calling `NavigationSetup(navigator)`\n    navEventNavigator = navigator,\n    destinationChangedCallback = { currentRoute = it },\n  )\n}\n</code></pre>  &gt; [!IMPORTANT] &gt; When passing a `NavEventNavigator` to `NavHost` composable, the NavHost will take care of setting up the navigator by calling `NavigationSetup(navigator)`. &gt; &gt; If you don't pass a \"global\" `NavEventNavigator` to `NavHost` composable, make sure there are property calls to `NavigationSetup(navigator)`. &gt; For example, we can call `NavigationSetup(navigator)` in each destination composable. &gt; &gt; <pre><code>@JvmField\nval StartScreenDestination: NavDestination = ScreenDestination&lt;StartScreenRoute&gt; {\n  NavigationSetup(navigator = koinInject())\n  StartScreen()\n}\n\n@JvmField\nval SearchProductScreenDestination: NavDestination = ScreenDestination&lt;SearchProductScreenRoute&gt; {\n  NavigationSetup(navigator = koinInject())\n  SearchProductsScreen()\n}\n</code></pre> &gt; &gt; \ud83d\udc49 Check out [scoped navigator sample](https://github.com/hoc081098/solivagant/blob/88e75468659fa3185edc47ef6b043ca86aaeee16/samples/simple/shared/src/commonMain/kotlin/com/hoc081098/solivagant/sample/simple/ui/detail/DetailNavigator.kt#L17C7-L17C22) for more information.  #### 3.2. Android  To display `MyAwesomeApp` on `Android`, use `setContent` in `Activity` / `Fragment`.  ###### MainActivity.kt  <pre><code>class MainActivity : ComponentActivity() {\n  override fun onCreate(savedInstanceState: Bundle) {\n    super.onCreate()\n\n    // navigator can be retrieved from the DI container, such as Koin, Dagger Hilt, etc...\n    setContent {\n      MyAwesomeApp()\n    }\n  }\n}\n</code></pre>  #### 3.3. Desktop  To display `MyAwesomeApp` on `Desktop`, use `androidx.compose.ui.window.application` and `Window` composable:  ###### main.kt  <pre><code>fun main() {\n  val lifecycleRegistry = LifecycleRegistry()\n  val savedStateSupport = SavedStateSupport()\n\n  application {\n    val windowState = rememberWindowState()\n    val lifecycleOwner = rememberLifecycleOwner(lifecycleRegistry)\n    LifecycleControllerEffect(\n      lifecycleRegistry = lifecycleRegistry,\n      windowState = windowState,\n    )\n\n    savedStateSupport.ClearOnDispose()\n\n    Window(\n      onCloseRequest = ::exitApplication,\n      title = \"Solivagant sample\",\n      state = windowState,\n    ) {\n      LifecycleOwnerProvider(lifecycleOwner) {\n        // navigator can be retrieved from the DI container, such as Koin, Koject, etc...\n        savedStateSupport.ProvideCompositionLocals { MyAwesomeApp() }\n      }\n    }\n  }\n}\n</code></pre>  &gt; [!TIP] &gt; For more information please check out [Desktop sample main.kt](https://github.com/hoc081098/solivagant/blob/2eb1ef4beee875d63aaa882f7198cc738638ad75/samples/sample/desktop/src/commonMain/kotlin/com/hoc081098/solivagant/sample/main.kt#L18-L49)  #### 3.4. iOs / tvOS / watchOS  To display `MyAwesomeApp` on `iOS/tvOS/watchOS`, use `ComposeUIViewController` (Kotlin - iosMain SourceSet) and `UIViewControllerRepresentable` (Swift - native code):  ###### MainViewController.kt  <pre><code>val AppLifecycleOwner by lazy { AppLifecycleOwner() }\n\nfun MainViewController(savedStateSupport: SavedStateSupport): UIViewController {\n  val lifecycleOwnerUIVcDelegate =\n    LifecycleOwnerComposeUIViewControllerDelegate(hostLifecycleOwner = AppLifecycleOwner)\n      .apply { bindTo(savedStateSupport) }\n      .apply { lifecycle.subscribe(LifecycleObserver) }\n\n  return ComposeUIViewController(\n    configure = { delegate = lifecycleOwnerUIVcDelegate },\n  ) {\n    LifecycleOwnerProvider(lifecycleOwnerUIVcDelegate) {\n      savedStateSupport.ProvideCompositionLocals { MyAwesomeApp() }\n    }\n  }\n}\n</code></pre>  ###### ComposeView.swift  <pre><code>private struct ComposeView: UIViewControllerRepresentable {\n  let savedStateSupport: NavigationSavedStateSupport\n\n  func makeUIViewController(context: Context) -&gt; UIViewController {\n    MainViewControllerKt.MainViewController(savedStateSupport: savedStateSupport)\n  }\n\n  func updateUIViewController(_ uiViewController: UIViewController, context: Context) { }\n}\n\nprivate class ComposeViewViewModel: ObservableObject {\n  let savedStateSupport = NavigationSavedStateSupport()\n  deinit {\n    self.savedStateSupport.clear()\n  }\n}\n\nstruct ComposeViewContainer: View {\n  @StateObject private var viewModel = ComposeViewViewModel()\n\n  var body: some View {\n    ComposeView(savedStateSupport: viewModel.savedStateSupport)\n      .ignoresSafeArea(.keyboard) // Compose has own keyboard handler\n  }\n}\n</code></pre>  &gt; [!TIP] &gt; For more information please check out [iOS sample MainViewController.kt](https://github.com/hoc081098/solivagant/blob/master/samples/sample/shared/src/iosMain/kotlin/com/hoc081098/solivagant/sample/MainViewController.kt) &gt; and [iosApp sample ComposeView.swift](https://github.com/hoc081098/solivagant/blob/master/samples/sample/iosApp/iosApp/ComposeView.swift)  ### 4. Use `NavEventNavigator` in `ViewModel` s / `@Composable` s to trigger navigation actions  <pre><code>// navigate to the destination that the given route leads to\nnavigator.navigateTo(DetailScreenRoute(\"some-id\"))\n// navigate up in the hierarchy\nnavigator.navigateUp()\n// navigate to the previous destination in the backstack\nnavigator.navigateBack()\n// navigate back to the destination belonging to the referenced route and remove all destinations\n// in between from the back stack, depending on inclusive the destination\nnavigator.navigateBackTo&lt;MainScreenRoute&gt;(inclusive = false)\n</code></pre>  ## Samples  - [Complete sample](https://github.com/hoc081098/solivagant/tree/master/samples/sample): a complete sample   that demonstrates how to use `solivagant-navigation` in `Compose Multiplatform (Android, Desktop, iOS)`   - `solivagant-navigation` for navigation in Compose Multiplatform.   - `kmp-viewmodel` to share `ViewModel` and `SavedStateHandle`.   - `Koin DI`.  - [Simple sample](https://github.com/hoc081098/solivagant/tree/master/samples/simple): a simple sample   that demonstrates how to use `solivagant-navigation` in `Compose Multiplatform (Android, Desktop, iOS)` to   switch between tabs (bottom navigation), but can keep the back stack state of each tab.   Basically, it's a **multi-backstack** demo sample.  - [Compose Multiplatform KmpViewModel KMM Unsplash Sample](https://github.com/hoc081098/Compose-Multiplatform-KmpViewModel-KMM-Unsplash-Sample): A KMP template of the Unsplash App using Compose multiplatform for Android, Desktop, iOS. Share everything including data, domain, presentation, and UI.  - [Compose Multiplatform Todo solivagant Sample](https://github.com/hoc081098/Compose-Multiplatform-Todo-solivagant-Sample): A KMP template of the Todo App using Compose multiplatform for Android, Desktop, iOS and Web. Share everything including data, domain, presentation, and UI.  - [Solivagant Wasm Sample](https://github.com/hoc081098/solivagant/tree/master/samples/solivagant-wasm-sample).  - [Kotlin Multiplatform app template with shared UI, using solivagant-navigation](https://github.com/hoc081098/KMP-App-Template-solivagant).  ## Roadmap  - [ ] Add more tests - [x] Add more samples - [ ] Add docs - [x] Review supported targets - [ ] Polish and improve the implementation and the public API - [x] Support transition when navigating (since [0.1.0](https://github.com/hoc081098/solivagant/releases/tag/0.1.0)). - [x] Support more targets such as wasm, watchOS, tvOS, etc... (since [0.2.0](https://github.com/hoc081098/solivagant/releases/tag/0.2.0)).  ## License  <pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n</code></pre>  [badge-android]: http://img.shields.io/badge/-android-6EDB8D.svg?style=flat  [badge-android-native]: http://img.shields.io/badge/support-[AndroidNative]-6EDB8D.svg?style=flat  [badge-wearos]: http://img.shields.io/badge/-wearos-8ECDA0.svg?style=flat  [badge-jvm]: http://img.shields.io/badge/-jvm-DB413D.svg?style=flat  [badge-js]: http://img.shields.io/badge/-js-F8DB5D.svg?style=flat  [badge-js-ir]: https://img.shields.io/badge/support-[IR]-AAC4E0.svg?style=flat  [badge-nodejs]: https://img.shields.io/badge/-nodejs-68a063.svg?style=flat  [badge-linux]: http://img.shields.io/badge/-linux-2D3F6C.svg?style=flat  [badge-windows]: http://img.shields.io/badge/-windows-4D76CD.svg?style=flat  [badge-wasm]: https://img.shields.io/badge/-wasm-624FE8.svg?style=flat  [badge-apple-silicon]: http://img.shields.io/badge/support-[AppleSilicon]-43BBFF.svg?style=flat  [badge-ios]: http://img.shields.io/badge/-ios-CDCDCD.svg?style=flat  [badge-mac]: http://img.shields.io/badge/-macos-111111.svg?style=flat  [badge-watchos]: http://img.shields.io/badge/-watchos-C0C0C0.svg?style=flat  [badge-tvos]: http://img.shields.io/badge/-tvos-808080.svg?style=flat"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#unreleased-tbd","title":"Unreleased - TBD","text":"<ul> <li>TDB</li> </ul>"},{"location":"changelog/#040-jul-22-2024","title":"0.4.0 - Jul 22, 2024","text":""},{"location":"changelog/#update-dependencies","title":"Update dependencies","text":"<ul> <li>Kotlin <code>2.0.0</code> \ud83c\udf89.</li> <li>JetBrains Compose Multiplatform <code>1.6.11</code> \ud83c\udf89.</li> <li>KMP ViewModel <code>0.8.0</code> \ud83c\udf89.</li> <li>KotlinX Coroutines <code>1.9.0-RC</code>.</li> <li>AndroidX Lifecycle <code>2.8.3</code>.</li> <li>AndroidX Compose Activity <code>1.9.0</code>.</li> <li>AndroidX Annotation <code>1.8.0</code>.</li> <li>Benasher44 UUID <code>0.8.4</code>.</li> </ul>"},{"location":"changelog/#030-mar-13-2024","title":"0.3.0 - Mar 13, 2024","text":"<ul> <li>Fix an issue where a wrong host <code>LifecycleOwner</code> can be used (#62).</li> <li>Rework internal implementation and refactor code (#62).</li> <li>Handle <code>startRoute</code> changes properly (#62).</li> </ul>"},{"location":"changelog/#022-mar-9-2024","title":"0.2.2 - Mar 9, 2024","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li><code>NavHost</code>: handle the host <code>LifecycleOwner</code> properly to avoid memory leaks (#61).</li> </ul>"},{"location":"changelog/#021-mar-8-2024","title":"0.2.1 - Mar 8, 2024","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix an issue where <code>SaveableStateHolder</code> would not be properly cleared when the destination   is removed from the back stack after configuration changes on Android (#59).</li> </ul>"},{"location":"changelog/#020-mar-7-2024","title":"0.2.0 - Mar 7, 2024","text":""},{"location":"changelog/#update-dependencies_1","title":"Update dependencies","text":"<ul> <li>JetBrains Compose Multiplatform <code>1.6.0</code> \ud83c\udf89.</li> <li>KMP ViewModel <code>0.7.1</code>.</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>New: Add support for Kotlin/Wasm (<code>wasmJs</code> target) \ud83c\udf89.</li> <li>New: Add <code>LenientLifecycleRegistry</code>, a <code>LifecycleRegistry</code> without the state checking,   and has <code>moveTo</code> method to move to a specific state. This is a flexible version   of <code>LifecycleRegistry</code>.</li> <li>New: Add <code>rememberWindowLifecycleOwner()</code> for Desktop (JVM) platform.</li> <li>New: Add <code>SavedStateSupport.ProvideCompositionLocals</code> and <code>SavedStateSupport.ClearOnDispose</code>   for non-Android platforms.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed: an issue where <code>LocalLifecycleOwner</code> provided the wrong <code>LifecycleOwner</code> to the content   of <code>NavHost</code> composable.</li> </ul>"},{"location":"changelog/#sample","title":"Sample","text":"<ul> <li>New:   Add Solivagant Wasm Sample.   You can open the web application by running   the <code>./gradlew :samples:solivagant-wasm-sample:wasmJsBrowserDevelopmentRun</code> Gradle task.</li> </ul>"},{"location":"changelog/#011-feb-25-2024","title":"0.1.1 - Feb 25, 2024","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Add workaround for issue   JetBrains/compose-multiplatform #3147 - Kotlin/Native can\u2019t use T::class in inline function of @Composable for iOS.</li> </ul>"},{"location":"changelog/#example-docs-and-tests","title":"Example, docs and tests","text":"<p>- Add Compose Multiplatform Todo solivagant Sample: A KMP template of the Todo App using Compose multiplatform for Android, Desktop, iOS and Web. Share everything including data, domain, presentation, and UI.</p>"},{"location":"changelog/#010-feb-19-2024","title":"0.1.0 - Feb 19, 2024","text":""},{"location":"changelog/#update-dependencies_2","title":"Update dependencies","text":"<ul> <li>KotlinX Coroutines <code>1.8.0</code>.</li> <li>KMP ViewModel <code>0.7.0</code>.</li> </ul>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>New: Add optional <code>transitionAnimations</code> parameter to <code>NavHost</code> @Composable functions.   Animations can be overridden with <code>NavHostDefaults.transitionAnimations</code>   or disabled with <code>NavHostTransitionAnimations.noAnimations</code>.   Default animations are the same as default animations in AndroidX\u2019s <code>NavHost</code>.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li> <p>Breaking: Add a <code>Modifier</code> parameter to <code>content</code> of <code>NavDestination</code>:   <pre><code>@InternalNavigationApi\npublic sealed interface ContentDestination&lt;T : BaseRoute&gt; : NavDestination {\n  // other members...\n  public val content: @Composable (route: T, modifier: Modifier) -&gt; Unit\n}\n</code></pre></p> <p>This change effects <code>ScreenDestination</code> and <code>OverlayDestination</code> as well. The <code>modifier</code> parameter should be passed to the <code>content</code> of <code>NavDestination</code> (a.k.a the root <code>@Composable</code> of the destination), for example: <pre><code>@Immutable\n@Parcelize\ndata class DetailScreenRoute(val id: String) : NavRoute\n\n@JvmField\nval DetailScreenDestination = ScreenDestination&lt;DetailScreenRoute&gt; { route, modifier -&gt;\n  DetailScreen(modifier = modifier, route = route)\n}\n\n@Composable\ninternal fun DetailScreen(modifier: Modifier, route: DetailScreenRoute) {\n  Scaffold(\n    modifier = modifier, // &lt;--- Pass the modifier to the root @Composable\n    topBar = { /* ... */ },\n  ) {\n    //* ... */\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"changelog/#001-feb-7-2024","title":"0.0.1 - Feb 7, 2024","text":"<ul> <li>Initial release of <code>solivagant</code> \ud83d\udd06.   Compose Multiplatform Navigation - \ud83c\udf38 Pragmatic, type safety navigation for Compose Multiplatform.   Based   on Freeletics Khonshu Navigation.   \u2665\ufe0f ViewModel, SavedStateHandle, Lifecycle, Multi-Backstacks, and more\u2026</li> </ul> <ul> <li>Dependencies<ul> <li>Kotlin <code>1.9.22</code>.</li> <li>JetBrains Compose Multiplatform <code>1.5.12</code>.</li> <li>KMP ViewModel <code>0.6.2</code>.</li> <li>KotlinX Coroutines <code>1.7.3</code>.</li> <li>KotlinX Collections Immutable <code>0.3.7</code>.</li> </ul> </li> </ul>"},{"location":"multiplatform/","title":"Multiplatform","text":""},{"location":"multiplatform/#supported-targets","title":"Supported targets","text":"<ul> <li><code>android</code>.</li> <li><code>jvm</code> (<code>Desktop</code>) (must add <code>kotlinx-coroutines-swing</code>/<code>kotlinx-coroutines-javafx</code> to your dependencies to   make sure <code>Dispatchers.Main</code> available).</li> </ul> <p>[!NOTE] If you are targeting <code>Desktop</code> and not using <code>JetBrains Compose Multiplatform</code>, you should provide the dependency <code>org.jetbrains.kotlinx:kotlinx-coroutines-swing</code> or <code>org.jetbrains.kotlinx:kotlinx-coroutines-javafx</code>, the <code>ViewModel.viewModelScope</code> depends on <code>Dispatchers.Main</code> provided by this library on Desktop.</p> <p>If you are using <code>JetBrains Compose Multiplatform</code> and targeting <code>Desktop</code>, you should provide <code>org.jetbrains.kotlinx:kotlinx-coroutines-swing</code>.</p> <ul> <li><code>js</code> (<code>IR</code>).</li> </ul> <ul> <li><code>Darwin</code> targets:<ul> <li><code>iosArm64</code>, <code>iosX64</code>, <code>iosSimulatorArm64</code>.</li> <li><code>macosX64</code>, <code>macosArm64</code>.</li> </ul> </li> </ul>"}]}